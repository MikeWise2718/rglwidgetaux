f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(1,1,1,1,1))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(1,1,1,1,1))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-50, 50, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(1,1,1,1,1))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-50, 50, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(1,1,1,1,1))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
97/261
4257.79 + 2857.58 + 1014.34
-3.5*0.7
1/(1+exp(2.45))
sig <- function(x) { 2/(2+exp(-x))}
Wxh <- -0.2
Whh <-  0.5
Why <-  0.25
Hbias <- 0.4
ybias <- 0
x0 <- 28
x2 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Wxy*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z2 <- Wxh*x2 + hbias
h2 <- sig(z2)
y2 <- Wxy*h2 + ybias
E2 <- 0.5*(t2-y2)^2
z2 <- Wxh*x2 + hbias
h2 <- sig(z2)
y2 <- Wxy*h2 + ybias
E2 <- 0.5*(t2-y2)^2
sig <- function(x) { 2/(2+exp(-x))}
Wxh <- -0.2
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 28
x2 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Wxy*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z2 <- Wxh*x2 + hbias
h2 <- sig(z2)
y2 <- Wxy*h2 + ybias
E2 <- 0.5*(t2-y2)^2
z2 <- Wxh*x2 + hbias
h2 <- sig(z2)
y2 <- Wxy*h2 + ybias
E2 <- 0.5*(t2-y2)^2
sig <- function(x) { 2/(2+exp(-x))}
Wxh <- -0.2
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 28
x2 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
sig <- function(x) { 2/(2+exp(-x))}
Wxh <- -0.2
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 28
x1 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
z0
sig <- function(x) { 2/(2+exp(-x))}
Wxh <- -0.1
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 18
x1 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
z0
sig <- function(x) { 1/(1+exp(-x))}
Wxh <- -0.1
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 18
x1 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
E <- E0 + E1 + E2
dE2 <- (t2-y2)*sig*(z2)*(1-sig(z2))
dE2 <- (t2-y2)*sig(z2)*(1-sig(z2))
sig <- function(x) { 1/(1+exp(-x))}
Wxh <- -0.1
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 18
x1 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + Whh*h1 +  hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
dE2 <- (t2-y2)*sig(z2)*(1-sig(z2))
E <- E0 + E1 + E2
# problem 3
sig <- function(x) { 1/(1+exp(-x))}
Wxh <- 0.5
Whh <-  -1
Why <-  -0.7
hbias <- -1.0
ybias <- 0
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
# problem 3
sig <- function(x) { 1/(1+exp(-x))}
x0 <- 9
x1 <- 4
x2 <- -2
Wxh <- 0.5
Whh <-  -1
Why <-  -0.7
hbias <- -1.0
ybias <- 0
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
sig <- function(x) { 1/(1+exp(-x))}
Wxh <- -0.1
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 18
x1 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + Whh*h1 +  hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
dE2 <- (t2-y2)*sig(z2)*(1-sig(z2))
E <- E0 + E1 + E2
sig <- function(x) { 1/(1+exp(-x))}
Wxh <- -0.1
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 18
x1 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + Whh*h1 +  hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
dE2 <- (t2-y2)*sig(z2)*(1-sig(z2))*Why
E <- E0 + E1 + E2
sig(1)
sig(2*sig(1))
sig(2*sig(2*sig(1)))
sig(2*sig(2*sig(2)))
sig(2*sig(2*sig(20)))
sig(2*sig(2*sig(-100)))
sig(2*sig(2*sig(-1000)))
sig(1)
2*sig(1)
sig(2*sig(1))
# problem 3
sig <- function(x) { 1/(1+exp(-x))}
x0 <- 9
x1 <- 4
x2 <- -2
Wxh <- 0.5
Whh <-  -1
Why <-  -0.7
hbias <- -1.0
ybias <- 0
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
# problem 3
sig <- function(x) { 1/(1+exp(-x))}
x0 <- 9
x1 <- 4
x2 <- -2
Wxh <- 0.5
Whh <-  -1
Why <-  -0.7
hbias <- -1.0
ybias <- 0
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
sig <- function(x) { 1/(1+exp(-x))}
Wxh <- -0.1
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 18
x1 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + Whh*h1 +  hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
dE2 <- (t2-y2)*sig(z2)*(1-sig(z2))*Why
E <- E0 + E1 + E2
E2
z2 <- z2 + 0.001
OE2 <- E2
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
E2
(E2-OE2)/0.001
oz2 <- z2 - 0.001
(E2-OE2)/(z2-oz2)
sig <- function(x) { 1/(1+exp(-x))}
Wxh <- -0.1
Whh <-  0.5
Why <-  0.25
hbias <- 0.4
ybias <- 0
x0 <- 18
x1 <- 9
x2 <- -8
t0 <- 0.1
t1 <- -0.1
t2 <- -0.2
z0 <- Wxh*x0 + hbias
h0 <- sig(z0)
y0 <- Why*h0 + ybias
E0 <- 0.5*(t0-y0)^2
z1 <- Wxh*x1 + Whh*h0 + hbias
h1 <- sig(z1)
y1 <- Why*h1 + ybias
E1 <- 0.5*(t1-y1)^2
z2 <- Wxh*x2 + Whh*h1 +  hbias
h2 <- sig(z2)
y2 <- Why*h2 + ybias
E2 <- 0.5*(t2-y2)^2
dE2 <- -(t2-y2)*sig(z2)*(1-sig(z2))*Why
E <- E0 + E1 + E2
1000*(1500+86+86)
1500*(1500+86+1500)
setwd("D:/local/rglwidgetaux")
setwd("D:/local/rglwidgetaux")
list.files()
list.files("www")
library(shiny); print(source('testwidgetaux.R')$value)
